// RIAPS Modbus (UART) Device Testing

app RIAPSModbusReqRepUART {
    message ModbusStatusRequest; // send request to determine Modbus status
    message ModbusStatus;        // provides Modbus status (True for open/ready, False for not connected)
    message ModbusCommand;       // send Modbus action Request
    message ModbusResponse;      // get response from Modbus action
    message ModbusData;          // information for the logger to grab

    library serialModbusLib;

    // Modbus (UART) device interface - UART2
    //     considered the server for the request/response interaction
    device ModbusUartReqRepDevice(slaveaddress=10,port='UART2',baudrate=115200,serialTimeout=1.0) {
        rep modbusStatusRepPort : (ModbusStatusRequest,ModbusStatus);
        rep modbusCommandRepPort : (ModbusCommand,ModbusResponse);
    }

    // Example Component to show Modbus I/F usage
    component ComputationalComponent() {
        timer clock 5000;
        pub tx_modbusData : ModbusData ;                    // When data is ready,
        req modbusStatusReqPort : (ModbusStatusRequest,ModbusStatus);
        req modbusCommandReqPort : (ModbusCommand,ModbusResponse); // Port used to communicate with the ModbusUartDevice
    }

    component Logger(db_host='127.0.0.1', db_port=8086, db_name='MOdbusIO', db_user='riaps', db_password='riaps') {
        sub rx_modbusData : ModbusData;
    }

    // Modbus Communication Example actor
    actor ModbusExampleActor() {
        local ModbusStatusRequest,ModbusStatus,ModbusCommand,ModbusResponse;               // Local message types
        {
            modbus : ModbusUartReqRepDevice(slaveaddress=10,port='UART2',baudrate=115200,serialTimeout=1);  // Slave Address is in decimal
            commInitiator : ComputationalComponent();
        }
    }

    actor ModbusLogger(){
        {
            logger : Logger(db_host='127.0.0.1', db_port=8086, db_name='ModbusIO', db_user='riaps', db_password='riaps');
        }
    }
}
